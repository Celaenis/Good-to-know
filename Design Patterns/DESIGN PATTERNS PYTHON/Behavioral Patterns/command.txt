from __future__ import annotations
from abc import ABC, abstractmethod
from typing import Any, Optional


class Command(ABC):
    """
    The Command interface declares a method for executing a command.
    """
    @abstractmethod
    def execute(self)->None:
        pass

class SimpleCommand(Command):
    def __init__(self,payload:str)->None:
        self.payload=payload

    def execute(self) -> None:
        print(f"Simple Command: I can print : \n"f"({self.payload})")

class ComplexCommand(Command):
    def __init__(self,reciever:Reciever, a:str,b:str)->None:
        self._reciever=reciever
        self._a=a
        self._b=b

    def execute(self)->None:
        print("Complex Command: Complex stuff is done by a reciver object. \n")
        self._reciever.do1(self._a) 
        self._reciever.do2(self._b)


class Reciever:
    def do1(self, a:str)->None:
        print(f"Reciever is working on {a}...\n") 
    def do2(self,b:str)->None:
        print(f"Reciever is working on {b}... \n")

class Invoker:
    """
    The Invoker is associated with one or several commands. It sends a request
    to the command.
    """    
    _on_start = None
    _on_finish = None
    def set_on_start(self, command: Command):  #un gel de set command
        #se putea si numai un parametru si pt al doilea element apelam iar setCommand
        self._on_start = command

    def set_on_finish(self, command: Command):
        self._on_finish = command
        """
        The Invoker does not depend on concrete command or receiver classes. The
        Invoker passes a request to a receiver indirectly, by executing a
        command.
        """     
    def do_smth(self)->None:     
        print("Invoker: Does Anyoane want anything before I begin?\n")
        if isinstance(self._on_start, Command): #??????????????????
            self._on_start.execute()
        print("Doing something very important .....  ")    
        if isinstance(self._on_finish, Command):
            self._on_finish.execute()
    
if __name__ == "__main__":
    """
    The client code can parameterize an invoker with any commands.
    """

    invoker = Invoker()
    invoker.set_on_start(SimpleCommand("Say Hi!"))
    receiver = Reciever()
    invoker.set_on_finish(ComplexCommand(
        receiver, "Send email", "Save report"))

    invoker.do_smth()
