from __future__ import annotations
from abc import ABC, abstractmethod
from tkinter.tix import IMAGE
from typing import List


class Graphic(ABC):
    @property
    def parent(self)->Graphic:
        return self._parent

    @parent.setter
    def parent(self,parent:Graphic):
        self._parent=parent

    def is_composite(self)->bool:
        return False
    @abstractmethod
    def move(self,x:int,y:int):
        pass
    @abstractmethod    
    def draw(self):
        pass  

class Dot(Graphic):
    def __init__(self,x:int,y:int):
        self.x=x
        self.y=y
    def move(self,x,y):
        self.x+=x
        self.y+=y 
    def draw(self):
        print("Am desenat un punct la coordonatele urmatoare \n x=  ")
        print(self.x)
        print("\n")
        print("y =  ")
        print(self.y)
        print("\n")

class Circle(Dot):
    def __init__(self,x,y,radius):
        super().__init__(x,y)
        self.radius=radius
    def draw(self):
        print("Am desenat un cerc la coordonatele urmatoare \n x=  ")
        print(self.x)
        print("\n")
        print("y =  ")
        print(self.y)
        print("\n")
        print("Cu raza :  ")
        print(self.radius)
        print("\n")
    def move(self,x,y):
        self.x+=x
        self.y+=y     
class CompoundGraphic(Graphic):
    def __init__(self) -> None:
        self._children: List[Graphic]=[]

    def add(self,child:Graphic)->None:
        self._children.append(child)
        child.parent=self #asta marcheaza defapt ca elementul asta devine parintele copilului

    def remove(self, child:Graphic)->None:
        self._children.remove(child)
        child.parent=None        
    def is_composite(self) -> bool:
        return True 
    def draw(self):
        for child in self._children:
                child.draw()
                print("-----------------") 
    def move(self,x,y):
        for child in self._children:
            child.move(x,y)            

class ImageEditor: #client            
    def __init__(self,all:CompoundGraphic):
        self.all=all
    def load(self):
        self.all=CompoundGraphic()
        self.all.add(Dot(1,3))
        self.all.add(Dot(5,7))
        self.all.add(Circle(0,0,5))
        self.all.add(Circle(1,1,7))

    def groupSelected(self, components:Graphic):
        group=CompoundGraphic()
        for component in components:
            group.add(component)
            self.all.remove(component)
        self.all.add(group)
        self.all.draw

if __name__=="__main__":
    d=Dot(2,6)
    c=Circle(3,3,9)
    compus=CompoundGraphic()
    compus.add(d)
    compus.add(c)
    compus.draw()
    print("Mutam elementele")
    compus.move(5,7)
    compus.draw()
    #IMAGE EDITOR NU MERGE!!
    comp2=CompoundGraphic()
    d2=Dot(5,6)
    c2=Circle(4,4,2)
    comp2.add(d2)
    comp2.add(c2)
    print("Avem cerc dot, si un elem compus")
    compus.add(comp2)
    compus.draw()


